# Ki√≠rat√°s, adatbek√©r√©s billenty≈±zetr≈ël, v√°ltoz√≥k, matematikai m≈±veletek

# 1. feladat
# Programunk k√©rje be egy ember lakhely√©nek ir√°ny√≠t√≥sz√°m√°t, a v√°rost, a k√∂zter√ºlet nev√©t, a k√∂zter√ºlet jelleg√©t,
# a h√°zsz√°mot √©s v√©g√ºl √≠rja ki egy sorban a k√∂vetkez≈ë form√°tumban: Pl.: 1042 Budapest Tanoda t√©r 2. (lakcim)

# irszam = input('K√©rem adja meg √≠r√°ny√≠t√≥ sz√°m√°t: ')
# varos = input('K√©rem adja meg a v√°ros nev√©t: ')
# kozter = input('K√©rem adja meg a k√∂zter√ºlet nev√©t : ')
# kozterjellege = input('K√©rem adja meg k√∂zter√ºlet jelleg√©t: ')
# hazszam = input('K√©rem adja meg a h√°zsz√°mot: ')
# print(f'{irszam} {varos} {kozter} {kozterjellege} {hazszam}.' )

# 2. feladat
# Olvassunk be k√©t vezet√©k- √©s k√©t keresztnevet, √©s √≠rassuk ki az ezekb≈ël k√©pezhet≈ë neveket! (nevek)

# vnev1 = input('K√©rem adja meg az els≈ë vezet√©knevet: ')
# vnev2 = input('K√©rem adja meg a m√°sodik vezet√©knevet: ')
# knev1 = input('K√©rem adja meg az els≈ë keresztnevet: ')
# knev2 = input('K√©rem adja meg a m√°sodik keresztnevet: ')
#
# print(f'{vnev1} {knev1}\n{vnev1} {knev2}\n{vnev2} {knev1}\n{vnev2} {knev2}')

# 3. feladat
# Olvassuk be a havi fizet√©st, √©s eredm√©nyk√©nt √≠rassuk ki az √©ves fizet√©st!
# Milyen t√≠pus√∫ v√°ltoz√≥kat haszn√°lhatunk? (fizetes)

# havi_ber = int(input('K√©rem adja meg a havi b√©r√©t (Ft): '))
# eves_ber = havi_ber * 12
# print(f'Az √©ves fizet√©se: {eves_ber} Ft')

# 4. feladat
# Programunk k√©rje be az Eur√≥ √°rfolyam√°t (1 ‚Ç¨ h√°ny Ft-ot √©r), majd azt, hogy h√°ny eur√≥t akarunk √°tv√°ltani Ft-ba,
# majd √≠rja ki, hogy h√°ny Ft az √°tv√°ltott eur√≥. (euro)

# eu_arfolyam = int(input('K√©rem adja meg az EUR/Ft √°rfolyam√°t: '))
# atvalt_osszeg = int(input('K√©rem adja meg az √°tv√°ltand√≥ √∂sszeget (EUR): '))
# kapott_ft = eu_arfolyam * atvalt_osszeg
# print(f'Az √°tv√°ltott EUR: {kapott_ft} Ft')

# 5. feladat
# √çrjunk programot, amely bek√©ri egy t√©glalap oldalait, √©s kisz√°molja a ker√ºlet√©t √©s ter√ºlet√©t! (teglalap_ker_ter)

# a = float(input('K√©rem adja meg a t√©glalap egyik oldal√°t (cm): '))
# b = float(input('K√©rem adja meg a t√©glalap m√°sik oldal√°t (cm): '))
# terulet = a * b
# kerulet = 2 * (a + b)
# print(f'Ter√ºlet: {terulet} cm\nKer√ºlet: {kerulet} cm')

# 6. feladat
# Irjunk programot, amely bek√©ri egy k√∂r sugar√°t, √©s kisz√°molja a k√∂r ker√ºlet√©t √©s ter√ºlet√©t! (kor_ker_ter)

# import math
# sugar = int(input('K√©rem adja meg a k√∂r sugar√°t: '))
# kerulet = 2 * sugar * math.pi
# terulet = math.pow(sugar, 2) * math.pi
# print(f'A k√∂r ker√ºlete: {kerulet}\nA k√∂r ter√ºlete: {terulet}')

# 7. feladat
# √çrjunk programot a Pitagorasz-t√©tel alkalmaz√°s√°ra! A program k√©rje be egy der√©ksz√∂g≈± h√°romsz√∂g k√©t
# befog√≥j√°t, √©s sz√°m√≠tsa ki az √°tfog√≥ hossz√°t! (pitagorasz)

# import math
# befogo1 = int(input('K√©rem adja meg az egyik befog√≥ hossz√°t:'))
# befogo2 = int(input('K√©rem adja meg a m√°sik befog√≥ hossz√°t:'))
# atfogo = math.sqrt(befogo1 ** 2 + befogo2 ** 2)
# print(f'Az √°tfog√≥ hossza: {atfogo}')

# 8. feladat
# Programunk k√©rje be a megtett √∫t hossz√°t √©s az eltelt id≈ët, √©s sz√°m√≠tsa ki az √°tlagsebess√©get! (atlagsebesseg)


# 9. feladat
# Programunk k√©rje be egy aut√≥ fogyaszt√°s√°t (literben 100 km-en), a benzin literenk√©nti √°r√°t √©s a megteend≈ë
# √∫t hossz√°t, majd sz√°m√≠tsa ki az √∫tik√∂lts√©get! (uzemanyag)


# 10. feladat
# K√©rj√ºk be a felhaszn√°l√≥ t√∂meg√©t kg-ban √©s magass√°g√°t cm-ben, majd sz√°m√≠tsuk ki √©s √≠rjuk a k√©perny≈ëre a
# felhaszn√°l√≥ testt√∂megindex√©t az al√°bbi k√©plet alapj√°n! TTI=ùíï√∂ùíéùíÜùíà/ùíéùíÇùíàùíÇùíîùíî√°ùíàùüê
# Figyelj r√°, hogy a k√©pletben a magass√°g m√©terben megadott √©rt√©k√©vel kell sz√°molni! (testtomegindex)



# 11. feladat
# Z√∂lds√©ges standunkon h√°romf√©le term√©ket √°rulunk: alm√°t, szilv√°t √©s sz≈ël≈ët. A program √≠rja ki a gy√ºm√∂lcs
# nev√©t √©s kilogrammonk√©nti egys√©g√°r√°t, majd k√©rdezze meg, hogy mennyit szeretn√©nk v√°s√°rolni. A v√°s√°rolt
# mennyis√©g mellett jelenjen meg a fizetend≈ë √∂sszeg, majd a v√©g√∂sszeget is adjuk meg! (zoldseges)


# 12. feladat
# Programunk k√©rje be egy hord√≥ √©s egy kancs√≥ t√©rfogat√°t literekben m√©rve eg√©sz sz√°mk√©nt! Szeretn√©nk
# tudni, hogy h√°ny teli kancs√≥ m√©rhet≈ë ki a hord√≥b√≥l, mennyi v√≠z marad a hord√≥ban a teli kancs√≥k kimer√©se
# ut√°n. Mennyi a hord√≥ √©s a kancs√≥ t√©rfogat√°nak h√°nyadosa? (hordo)



# 13. feladat
# A bankjegyautomat√°b√≥l az √ºgyf√©l legfeljebb 300 000 Ft-ot vehet f√∂l, 1 000, 5 000 √©s 10 000 Ft-os
# c√≠mletekben. A program k√©rjen be egy ezerrel oszthat√≥ √∂sszeget, majd hat√°rozza meg, hogy egy beolvasott
# √∂sszeget milyen c√≠mletekben kell kifizetni, ha a lehet≈ë legkevesebb bankjegyet akarjuk felhaszn√°lni. (bankjegy)
# A megold√°st a k√∂vetkez≈ë form√°ban √≠rja ki:



# 14. feladat
# Programunk k√©rje be egy eszk√∂z m√°sodpercekben m√©rt √ºzemidej√©t! Eredm√©nyk√©nt adja meg ‚Ä¶nap ‚Ä¶√≥ra
# ‚Ä¶m√°sodperc form√°ban az √ºzemid≈ët! (uzemido)


# 15. feladat
# √çrjunk programot, amely kisz√°m√≠tja egy aut√≥val megtett √∫tra fizetett k√∂lts√©gt√©r√≠t√©st! A program k√©rje be a
# megtett √∫t hossz√°t km-ben, az aut√≥ fogyaszt√°s√°t 100 km-en literben valamint az √ºzemanyag √°r√°t √©s ezek
# ismeret√©ben sz√°m√≠tsa ki az √ºzemanyagk√∂lts√©get. A megtett √∫tra, a fogyaszt√°sra , √©s az √ºzemanyag √°r√°ra is
# fogadjon el t√∂rt sz√°mokat is.
# [Az √ºzemanyagk√∂lts√©g kisz√°m√≠t√°s√°ra haszn√°ld az al√°bbi k√©pletet: √ºzemanyagk√∂lts√©g=(√∫t*fogyaszt√°s*√ºzemanyag √°r)/100 ]
# A k√∂lts√©gt√©r√≠t√©s √∂sszege 100 km-n√©l nem hosszabb √∫t eset√©n maga az √ºzemanyagk√∂lts√©g, enn√©l hosszabb
# √∫t eset√©n az √ºzemanyagk√∂lts√©ghez hozz√°adj√°k a megtett √∫t 25-sz√∂r√∂s√©t √©s √≠gy kapjuk meg a k√∂lts√©gt√©r√≠t√©st.
# A program c√≠me "Utaz√°si k√∂lts√©gt√©r√≠t√©s" legyen √©s minta szerinti form√°ban √≠rja ki az adatokat! (utazasikoltseg)


# El√°gaz√°sok

# 16. feladat
# K√©rj√ºk be a k√ºls≈ë h≈ëm√©rs√©kletet, √©s √≠rassuk ki, ha fagy odakint! (fagy)

# homerseklet = float(input('K√©rem adja meg a k√ºls≈ë h≈ëm√©rs√©kletet: '))
# if homerseklet < 0:
#     print('Fagy odakint.')

# 17. feladat
# K√©rdezz√ºk meg a felhaszn√°l√≥t√≥l, hogy szeret-e programozni, ha igen, akkor √≠rassunk ki, hogy ‚ÄûM√©g sokra
# viszed az √©letben!‚Äù, majd k√∂sz√∂nj√∂n el a program (Viszontl√°t√°sra!). (kerdes)

# kerdes = input('Szeret programozni?\n ')
# if kerdes == 'igen':
#     print('M√©g sokra viszed az √©letben!\nViszontl√°t√°sra!')

# 18. feladat
# K√©rj√ºnk be egy eg√©sz sz√°mot, √©s √≠rassuk ki hogy az adott sz√°m p√°ros-e vagy sem. (paritas)

# szam = int(input('K√©rek egy eg√©sz sz√°mot: '))
# if szam % 2 == 0:
#     print('P√°ros')
# else:
#     print('P√°ratlan')

# 19. feladat
# Olvassunk be egy sz√°mot a billenty≈±zetr≈ël, √©s √≠rjuk ki, hogy oszthat√≥-e 3-mal! (oszthato3)

# szam = int(input('K√©rek egy sz√°mot: '))
# if szam % 3 == 0:
#     print('Oszthat√≥ h√°rommal.')

# 20. feladat
# Olvasson be a billenty≈±zetr≈ël egy sz√°mot √©s mondjuk meg, hogy a sz√°m negat√≠v, vagy pozit√≠v vagy egyik
# sem! (elojel)

# szam = int(input('K√©rek egy sz√°mot: '))
# if szam < 0:
#     print('A sz√°m negat√≠v.')
# elif szam > 0:
#     print('A sz√°m pozit√≠v.')
# else:
#     print('A sz√°m nulla.')

# 21. feladat
# K√©t beolvasott sz√°mot √≠rassunk ki √∫gy, hogy k√∂z√©j√ºk tessz√ºk a megfelel≈ë rel√°ci√≥s jelet (<,>,=)! (relacio)

# szam1 = int(input('K√©rek egy sz√°mot: '))
# szam2 = int(input('K√©rem egy m√°sik sz√°mot: '))
# if szam1 > szam2:
#     print(f'{szam1} > {szam2}')
# elif szam1 < szam2:
#     print(f'{szam1} < {szam2}')
# else:
#     print(f'{szam1} = {szam2}')

# 22. feladat
# Egy beolvasott sz√°mr√≥l d√∂ntse el a program hogy -30 √©s 40 k√∂z√∂tt van-e! (kozotte)


# 23. feladat
# √çrjunk programot,amely √©rt√©kel egy dolgozatot pontsz√°m alapj√°n! Az √©rt√©kel√©s a k√∂vetkez≈ë t√°bl√°zat alapj√°n t√∂rt√©njen:
# Pontsz√°m √ârt√©kel√©s
# 0 - 42 el√©gtelen
# 43 - 57 el√©gs√©ges
# 58 - 72 k√∂zepes
# 73 - 87 j√≥
# 88 - 100 jeles



# 24. feladat
# √çrj programot, amely bek√©r a felhaszn√°l√≥t√≥l egy helys√©gnevet, valamint ennek a helys√©gnek a l√©leksz√°m√°t,
# √©s a megadott l√©leksz√°mt√≥l f√ºgg≈ëen ki√≠rja, hogy az adott helys√©g milyen telep√ºl√©st√≠pusba tartozik.
# (telepules)
# ÔÄ≠ ha a l√©leksz√°m kevesebb, mint 5000, akkor k√∂zs√©g
# ÔÄ≠ ha a l√©leksz√°m legal√°bb 5000, de kevesebb, mint 20 000, akkor kisv√°ros
# ÔÄ≠ ha a l√©leksz√°m legal√°bb 20 000, de kevesebb, mint 100 000, akkor k√∂z√©pv√°ros
# ÔÄ≠ ha a l√©leksz√°m legal√°bb 100 000, de kevesebb, mint 1 000 000, akkor nagyv√°ros
# ÔÄ≠ ha a l√©leksz√°m legal√°bb 1 000 000, akkor metropolis
# ÔÄ≠ ha a felhaszn√°l√≥ 0 vagy ann√°l kisebb sz√°mot ad meg, a program √≠rja ki, hogy "Hib√°s adatbevitel"



# 25. feladat
# A program k√©rjen be k√©t sz√°mot, √©s egy m≈±veleti jelet (+,-,/,*), majd √≠rja ki a m≈±velet eredm√©ny√©t.
# (muvelet)


# 26. feladat
# K√©rj√ºk be egy di√°k matematika √©v v√©gi jegy√©t numerikus form√°ban, √©s √≠rjuk ki azt sz√∂vegesen (el√©gtelen,
# el√©gs√©ges, k√∂zepes, j√≥, jeles). Amennyiben a be√≠rt √©rdemjegy nem 1..5 k√∂z√∂tti sz√°m, √∫gy a hib√°s adat ki√≠r√°s
# jelenjen meg. (osztalyzat)



# 27. feladat
# K√©rj√ºk be egy nap sorsz√°m√°t (1..7) numerikus form√°ban, √©s √≠rjuk ki a nap megnevez√©s√©t a k√©perny≈ëre
# (h√©tf≈ë, kedd, ..., vas√°rnap). Amennyiben a be√≠rt sorsz√°m nem 1..7 k√∂z√∂tti sz√°m, √∫gy a hib√°s adat ki√≠r√°s
# jelenjen meg. (hetnapjai)

# day_number = int(input('K√©rem adja meg a nap sorsz√°m√°t: '))
# weeks = ['H√©tf√∂', 'Kedd', 'Szerda', 'Cs√ºt√∂rt√∂k', 'P√©ntek', 'Szombat', 'Vas√°rnap']
# if 0 < day_number < 8:
#     print(weeks[day_number - 1])
# else:
#     print('Hib√°s adat.')

# 28. feladat
# K√©rj√ºk be egy h√≥nap sorsz√°m√°t (1..12) numerikus form√°ban, √©s √≠rjuk ki a h√≥nap megnevez√©s√©t a k√©perny≈ëre
# (janu√°r, ..., december). Amennyiben a be√≠rt sorsz√°m nem 1..12 k√∂z√∂tti sz√°m, √∫gy a hib√°s adat ki√≠r√°s jelenjen
# meg. (honapok)



# 29. feladat
# K√©rj√ºk be egy √°ru egys√©g√°r√°t (Ft), a v√°s√°rland√≥ mennyis√©get (db), √©s hogy mennyi p√©nz van n√°lunk (Ft).
# Adjuk meg, hogy meg tudjuk-e v√°s√°rolni a k√≠v√°nt darabsz√°mot, √©s ez esetben mennyi p√©nz√ºnk maradna a
# v√°s√°rl√°s ut√°n. Ha nincs el√©g p√©nz√ºnk, akkor azt adjuk meg, h√°ny darab term√©k megv√°s√°rl√°s√°ra lenne csak
# el√©g a p√©nz√ºnk. (vasarlas)



# 30. feladat
# Adott √©vr≈ël d√∂nts√ºk el, hogy sz√∂k≈ë√©v-e! (Sz√∂k≈ë√©vek a k√∂vetkez≈ëk: minden n√©ggyel oszthat√≥ √©v, kiv√©ve a
# sz√°zzal is oszthat√≥kat. Sz√∂k≈ë√©vek viszont a 400-zal oszthat√≥ √©vek. Vagyis a sz√°zasra v√©gz≈ëd≈ë √©vek k√∂z√ºl
# csak azok sz√∂k≈ë√©vek, amelyek 400-zal is oszthat√≥k.) (szokoev)




# V√©letlensz√°mok


# 31. feladat
# Gener√°ljunk h√°romjegy≈± v√©letlensz√°mot! (haromjegyu)

# import random as r
# veletlenszam = r.randint(100, 999)
# print(veletlenszam)

# 32. feladat
# Programunk adjon meg v√©letlenszer≈±en egy 0 √©s 25 k√∂z√∂tti eg√©sz sz√°mot, illetve egy 0 √©s 25 k√∂z√∂tti
# tizedest√∂rtet! (veletlenszam1)

# import random as r
# vlszam = int(r.randint(0, 25))
# print(vlszam)
# vlszam = float(r.randint(0, 25))
# print(vlszam)

# 33. feladat
# Programunk adjon meg v√©letlenszer≈±en egy 15 √©s 25 k√∂z√∂tti eg√©sz sz√°mot, illetve egy 15 √©s 25 k√∂z√∂tti
# tizedest√∂rtet! (veletlenszam2)

# import random as r
# vlszam = int(r.randint(15, 25))
# print(vlszam)
# vlszam = float(r.randint(15, 25))
# print(vlszam)

# 34. feladat
# Programunk adjon meg egy 0-n√°l nem kisebb, de 100-n√°l kisebb tetsz≈ëleges p√°ros sz√°mot! (veletlen_paros)

# import random as r
# vlszam = 1
# while vlszam % 2 != 0:
#     vlszam = r.randint(0, 100)
# print(vlszam)


# 35. feladat
# Gener√°ljunk a [100,200] tartom√°nyb√≥l egy 5-tel oszthat√≥ sz√°mot! (veletlen_5)

# import random as r
# vlszam = 1
# while vlszam % 5 != 0:
#     vlszam = r.randint(100, 200)
# print(vlszam)

# 36. feladat
# Tetsz≈ëleges 0 √©s egymilli√≥ k√∂z√∂tti eg√©sz sz√°mr√≥l mondja meg a program hogy h√°ny jegy≈±! (hanyjegyu)

'''
import random as r
vlszam = int(r.randint(0, 1000000))
'''

# 37. feladat
# Gener√°ljunk 6 kockadob√°st! (kockadobas)



# 38. feladat
# Gener√°ljunk v√©letlenszer≈±en 5 k√ºl√∂nb√∂z≈ë lott√≥sz√°mot! (lotto)



# 39. feladat
# A program tal√°ljon ki k√©t v√©letlen sz√°mot 10..50 k√∂z√∂tt, majd √≠rja ki ≈ëket a k√©perny≈ëre A+B=? form√°ban
# (A √©s B hely√©be a konkr√©t √©rt√©k ker√ºlj√∂n behelyettes√≠t√©sre. A program k√©rje a v√°laszt a felhaszn√°l√≥t√≥l, √©s
# adja meg, hogy a be√≠rt √©rt√©k val√≥ban a k√©t sz√°m √∂sszege-e vagy sem. (osszead)



# 40. feladat
# Programunk gener√°ljon egy 0-100 k√∂zti eg√©sz sz√°mot, majd k√©rjen a felhaszn√°l√≥t√≥l is egy ilyet. Ha a k√©t
# sz√°m megegyezik, akkor jelenjen meg a ‚Äûnyert‚Äù, egy√©bk√©nt a ‚Äûnem nyert‚Äù sz√∂veg! (szamkitalalo)